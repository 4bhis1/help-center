---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import Categories from '../components/Categories.astro';
import PopularArticles from '../components/PopularArticles.astro';
import ContactSupport from '../components/ContactSupport.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="Help Center - Get the support you need">
	<Header />
	<Hero />
	<Categories />
	<PopularArticles />
	<ContactSupport />
	<Footer />
</Layout>

<script>
	// Add smooth scrolling for anchor links
	document.addEventListener('DOMContentLoaded', () => {
		// Search functionality with suggestions
		const searchInput = document.getElementById('hero-search');
		const searchSuggestions = document.getElementById('search-suggestions');
		
		const sampleSuggestions = [
			'How to create a workspace',
			'Setting up notifications',
			'Troubleshooting login issues',
			'Managing team permissions',
			'Using keyboard shortcuts',
			'Setting up integrations'
		];

		if (searchInput && searchSuggestions) {
			searchInput.addEventListener('input', (e) => {
				const query = e.target.value.toLowerCase();
				if (query.length > 0) {
					const filtered = sampleSuggestions.filter(suggestion => 
						suggestion.toLowerCase().includes(query)
					);
					
					if (filtered.length > 0) {
						searchSuggestions.innerHTML = filtered.map(suggestion => 
							`<div class="search-suggestion">${suggestion}</div>`
						).join('');
						searchSuggestions.style.display = 'block';
					} else {
						searchSuggestions.style.display = 'none';
					}
				} else {
					searchSuggestions.style.display = 'none';
				}
			});

			// Hide suggestions when clicking outside
			document.addEventListener('click', (e) => {
				if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
					searchSuggestions.style.display = 'none';
				}
			});

			// Handle suggestion clicks
			searchSuggestions.addEventListener('click', (e) => {
				if (e.target.classList.contains('search-suggestion')) {
					searchInput.value = e.target.textContent;
					searchSuggestions.style.display = 'none';
				}
			});
		}

		// Category filtering
		const filterTabs = document.querySelectorAll('.filter-tab');
		const categoryCards = document.querySelectorAll('.category-card');

		filterTabs.forEach(tab => {
			tab.addEventListener('click', () => {
				// Update active tab
				filterTabs.forEach(t => t.classList.remove('active'));
				tab.classList.add('active');

				const filter = tab.dataset.filter;
				
				categoryCards.forEach((card, index) => {
					const category = card.dataset.category;
					const shouldShow = filter === 'all' || 
						(filter === 'getting-started' && category.includes('getting-started')) ||
						(filter === 'technical' && (category.includes('troubleshooting') || category.includes('api'))) ||
						(filter === 'account' && (category.includes('account') || category.includes('security')));

					if (shouldShow) {
						card.style.display = 'flex';
						setTimeout(() => {
							card.style.opacity = '1';
							card.style.transform = 'translateY(0)';
						}, index * 50);
					} else {
						card.style.opacity = '0';
						card.style.transform = 'translateY(20px)';
						setTimeout(() => {
							card.style.display = 'none';
						}, 300);
					}
				});
			});
		});

		// Article sorting
		const sortSelect = document.getElementById('sort-articles');
		const articlesGrid = document.getElementById('articles-grid');
		const loadMoreBtn = document.getElementById('load-more');

		if (sortSelect && articlesGrid) {
			sortSelect.addEventListener('change', () => {
				const articles = Array.from(articlesGrid.children);
				const sortBy = sortSelect.value;

				articles.sort((a, b) => {
					if (sortBy === 'popular') {
						const viewsA = parseInt(a.dataset.views.replace(/[^\d]/g, ''));
						const viewsB = parseInt(b.dataset.views.replace(/[^\d]/g, ''));
						return viewsB - viewsA;
					} else if (sortBy === 'recent') {
						// Simulate recent sorting (in real app, would use actual dates)
						return Math.random() - 0.5;
					}
					return 0;
				});

				// Animate the reordering
				articles.forEach((article, index) => {
					article.style.opacity = '0';
					article.style.transform = 'translateY(20px)';
					setTimeout(() => {
						articlesGrid.appendChild(article);
						article.style.opacity = '1';
						article.style.transform = 'translateY(0)';
					}, index * 100);
				});
			});
		}

		// Load more articles functionality
		if (loadMoreBtn) {
			loadMoreBtn.addEventListener('click', () => {
				// Simulate loading more articles
				loadMoreBtn.textContent = 'Loading...';
				loadMoreBtn.disabled = true;

				setTimeout(() => {
					loadMoreBtn.textContent = 'Load More Articles';
					loadMoreBtn.disabled = false;
					// In a real app, you would fetch and append new articles here
				}, 1500);
			});
		}

		// Support modal functionality
		const contactSupportBtn = document.getElementById('contact-support');
		const supportModal = document.getElementById('support-modal');
		const modalClose = document.getElementById('modal-close');

		if (contactSupportBtn && supportModal && modalClose) {
			contactSupportBtn.addEventListener('click', () => {
				supportModal.style.display = 'flex';
				document.body.style.overflow = 'hidden';
			});

			modalClose.addEventListener('click', () => {
				supportModal.style.display = 'none';
				document.body.style.overflow = 'auto';
			});

			supportModal.addEventListener('click', (e) => {
				if (e.target === supportModal) {
					supportModal.style.display = 'none';
					document.body.style.overflow = 'auto';
				}
			});
		}

		// Form submission
		const supportForm = document.querySelector('.support-form');
		if (supportForm) {
			supportForm.addEventListener('submit', (e) => {
				e.preventDefault();
				const submitBtn = supportForm.querySelector('.submit-btn');
				submitBtn.textContent = 'Sending...';
				submitBtn.disabled = true;

				setTimeout(() => {
					alert('Message sent successfully!');
					supportForm.reset();
					supportModal.style.display = 'none';
					document.body.style.overflow = 'auto';
					submitBtn.textContent = 'Send Message';
					submitBtn.disabled = false;
				}, 2000);
			});
		}

		// Smooth scrolling for anchor links
		const links = document.querySelectorAll('a[href^="#"]');
		links.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const target = document.querySelector(link.getAttribute('href'));
				if (target) {
					target.scrollIntoView({
						behavior: 'smooth'
					});
				}
			});
		});

		// Add scroll animations for elements coming into view
		const observerOptions = {
			threshold: 0.1,
			rootMargin: '0px 0px -50px 0px'
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.style.opacity = '1';
					entry.target.style.transform = 'translateY(0)';
				}
			});
		}, observerOptions);

		// Observe elements for scroll animations
		const animateElements = document.querySelectorAll('.category-card, .article-card, .stat');
		animateElements.forEach(el => {
			el.style.opacity = '0';
			el.style.transform = 'translateY(30px)';
			el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
			observer.observe(el);
		});
	});
</script>