---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import Categories from '../components/Categories.astro';
import PopularArticles from '../components/PopularArticles.astro';
import QuickActions from '../components/QuickActions.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="Support Center - Get help and find answers">
	<Header />
	<Hero />
	<Categories />
	<PopularArticles />
	<QuickActions />
	<Footer />
</Layout>

<script>
	import { HELP_DATA, searchArticles, getArticlesByCategory } from '../data/constants';

	document.addEventListener('DOMContentLoaded', () => {
		// Search functionality
		const searchInput = document.getElementById('hero-search') as HTMLInputElement;
		const searchSuggestions = document.getElementById('search-suggestions') as HTMLElement;
		
		if (searchInput && searchSuggestions) {
			let searchTimeout: NodeJS.Timeout;

			searchInput.addEventListener('input', (e) => {
				const query = (e.target as HTMLInputElement).value.toLowerCase();
				
				// Clear previous timeout
				clearTimeout(searchTimeout);
				
				// Debounce search
				searchTimeout = setTimeout(() => {
					if (query.length > 0) {
						// Filter suggestions based on query
						const filtered = HELP_DATA.searchSuggestions.filter(suggestion => 
							suggestion.toLowerCase().includes(query)
						);
						
						// Also search articles
						const articleResults = searchArticles(query);
						const articleSuggestions = articleResults.slice(0, 3).map(article => article.title);
						
						const allSuggestions = [...filtered.slice(0, 3), ...articleSuggestions];
						
						if (allSuggestions.length > 0) {
							searchSuggestions.innerHTML = allSuggestions.map(suggestion => 
								`<div class="search-suggestion">${suggestion}</div>`
							).join('');
							searchSuggestions.style.display = 'block';
						} else {
							searchSuggestions.style.display = 'none';
						}
					} else {
						searchSuggestions.style.display = 'none';
					}
				}, 300);
			});

			// Handle suggestion clicks
			searchSuggestions.addEventListener('click', (e) => {
				const target = e.target as HTMLElement;
				if (target.classList.contains('search-suggestion')) {
					searchInput.value = target.textContent || '';
					searchSuggestions.style.display = 'none';
					// Here you would typically trigger a search or navigation
					console.log('Searching for:', target.textContent);
				}
			});

			// Hide suggestions when clicking outside
			document.addEventListener('click', (e) => {
				const target = e.target as HTMLElement;
				if (!searchInput.contains(target) && !searchSuggestions.contains(target)) {
					searchSuggestions.style.display = 'none';
				}
			});
		}

		// Category filtering functionality
		const filterTabs = document.querySelectorAll('.filter-tab');
		const articlesList = document.getElementById('articles-list');
		
		filterTabs.forEach(tab => {
			tab.addEventListener('click', () => {
				// Update active tab
				filterTabs.forEach(t => t.classList.remove('active'));
				tab.classList.add('active');
				
				// Get category and filter articles
				const category = tab.getAttribute('data-category') || 'all';
				const filteredArticles = getArticlesByCategory(category);
				
				// Add filtering animation
				if (articlesList) {
					articlesList.classList.add('filtering');
					
					setTimeout(() => {
						// Hide all articles first
						const allArticles = articlesList.querySelectorAll('.article-item');
						allArticles.forEach(article => {
							article.classList.add('hidden');
						});
						
						// Show filtered articles
						filteredArticles.forEach((article, index) => {
							const articleElement = articlesList.querySelector(`[href="#article-${article.id}"]`);
							if (articleElement) {
								articleElement.classList.remove('hidden');
								articleElement.classList.add('fade-in');
								articleElement.style.animationDelay = `${index * 0.1}s`;
							}
						});
						
						articlesList.classList.remove('filtering');
					}, 150);
				}
			});
		});

		// Category card interactions
		const categoryCards = document.querySelectorAll('.category-card');
		categoryCards.forEach(card => {
			card.addEventListener('click', (e) => {
				e.preventDefault();
				const categoryId = card.getAttribute('data-category');
				
				// Find and click the corresponding filter tab
				const targetTab = document.querySelector(`[data-category="${categoryId}"]`);
				if (targetTab) {
					targetTab.click();
					// Scroll to articles section
					document.querySelector('.popular-articles')?.scrollIntoView({
						behavior: 'smooth',
						block: 'start'
					});
				}
			});
		});

		// Quick action interactions
		const quickActionCards = document.querySelectorAll('.quick-action-card');
		quickActionCards.forEach(card => {
			card.addEventListener('click', () => {
				const action = card.getAttribute('data-action');
				console.log('Quick action clicked:', action);
				
				switch (action) {
					case 'create-ticket':
						// Open ticket creation modal or navigate to form
						alert('Opening ticket creation form...');
						break;
					case 'track-ticket':
						// Open ticket tracking interface
						alert('Opening ticket tracking...');
						break;
					case 'call-support':
						// Show contact information
						alert('Call us at: +91-80-4040-2020');
						break;
				}
			});
		});

		// Load more articles functionality
		const loadMoreBtn = document.getElementById('load-more-articles');
		if (loadMoreBtn) {
			loadMoreBtn.addEventListener('click', () => {
				loadMoreBtn.textContent = 'Loading...';
				loadMoreBtn.setAttribute('disabled', 'true');
				
				// Simulate API call
				setTimeout(() => {
					console.log('Loading more articles...');
					// Here you would typically fetch more articles from API
					loadMoreBtn.textContent = 'Load more articles';
					loadMoreBtn.removeAttribute('disabled');
				}, 1500);
			});
		}

		// Article click tracking
		const articleItems = document.querySelectorAll('.article-item');
		articleItems.forEach(item => {
			item.addEventListener('click', (e) => {
				e.preventDefault();
				const articleTitle = item.querySelector('.article-title')?.textContent;
				console.log('Article clicked:', articleTitle);
				// Here you would typically navigate to the article or track the click
			});
		});

		// Smooth scroll for anchor links
		const anchorLinks = document.querySelectorAll('a[href^="#"]');
		anchorLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const targetId = link.getAttribute('href')?.substring(1);
				const targetElement = document.getElementById(targetId || '');
				
				if (targetElement) {
					targetElement.scrollIntoView({
						behavior: 'smooth',
						block: 'start'
					});
				}
			});
		});

		// Add scroll animations
		const observerOptions = {
			threshold: 0.1,
			rootMargin: '0px 0px -100px 0px'
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('animate-in');
					observer.unobserve(entry.target);
				}
			});
		}, observerOptions);

		// Observe elements for animations
		const animateElements = document.querySelectorAll('.category-card, .article-item, .quick-action-card');
		animateElements.forEach(el => {
			observer.observe(el);
		});

		// Enhanced search with real-time filtering
		if (searchInput) {
			searchInput.addEventListener('keyup', (e) => {
				if (e.key === 'Enter') {
					const query = searchInput.value.trim();
					if (query) {
						const results = searchArticles(query);
						console.log('Search results:', results);
						
						// Here you would typically update the UI with search results
						// For now, we'll filter the visible articles
						if (articlesList) {
							const allArticles = articlesList.querySelectorAll('.article-item');
							allArticles.forEach(article => {
								const title = article.querySelector('.article-title')?.textContent?.toLowerCase() || '';
								if (title.includes(query.toLowerCase())) {
									article.style.display = 'flex';
								} else {
									article.style.display = 'none';
								}
							});
						}
					}
				}
			});
		}
	});
</script>

<style>
	/* Animation styles */
	.category-card,
	.article-item,
	.quick-action-card {
		opacity: 0;
		transform: translateY(20px);
		transition: opacity 0.6s ease, transform 0.6s ease;
	}

	.animate-in {
		opacity: 1 !important;
		transform: translateY(0) !important;
	}

	/* Add staggered animation delays */
	.category-card:nth-child(1) { transition-delay: 0.1s; }
	.category-card:nth-child(2) { transition-delay: 0.2s; }
	.category-card:nth-child(3) { transition-delay: 0.3s; }
	.category-card:nth-child(4) { transition-delay: 0.4s; }
	.category-card:nth-child(5) { transition-delay: 0.5s; }
	.category-card:nth-child(6) { transition-delay: 0.6s; }

	.article-item:nth-child(1) { transition-delay: 0.1s; }
	.article-item:nth-child(2) { transition-delay: 0.2s; }
	.article-item:nth-child(3) { transition-delay: 0.3s; }
	.article-item:nth-child(4) { transition-delay: 0.4s; }
	.article-item:nth-child(5) { transition-delay: 0.5s; }
	.article-item:nth-child(6) { transition-delay: 0.6s; }
</style>